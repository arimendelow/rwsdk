diff --git a/dist/index.js b/dist/index.js
index d29a15effb383be30d3017e5f5fb7a53a02b3f04..e6a29459a6b95826c97d5904f7b42d328ded4802 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1753,6 +1753,13 @@ function getDevMiniflareOptions(resolvedPluginConfig, viteDevServer) {
               contents: fs2.readFileSync(
                 fileURLToPath(new URL(RUNNER_PATH, import.meta.url))
               )
+            },
+            // context(justinvdm, 2025-01-29): Hack to get Prisma WASM module to load
+            // context(justinvdm, 2025-01-29): Resolve relative to @prisma/client since pnpm places it relative to @prisma/client in node_modules/.pnpm
+            {
+              type: 'CompiledWasm',
+              path: '/__prisma_query_engine_bg_wasm',
+              contents: fs2.readFileSync(createRequire(createRequire(import.meta.url).resolve('@prisma/client')).resolve('.prisma/client/query_engine_bg.wasm'))
             }
           ]
         };
diff --git a/dist/runner-worker/index.js b/dist/runner-worker/index.js
index c8020c480cc8ec6b837356903899f38135c44250..1b231d07552bab05d72beb78310de4364ac6b05a 100644
--- a/dist/runner-worker/index.js
+++ b/dist/runner-worker/index.js
@@ -1386,6 +1386,22 @@ async function createModuleRunner(env, webSocket) {
     },
     {
       async runInlinedModule(context, transformed, module) {
+        // context(justinvdm, 2025-01-29): Hack to get Prisma WASM module to load
+        // 1. import() the module - this relies on these modules' contents having been provided to miniflare when instantiting it
+        // 2. mimic the way vite collects exports for a module so that dependant modules can access it
+        if (module.file.endsWith('query_engine_bg.wasm')) {
+          const result = await import('/__prisma_query_engine_bg_wasm')
+        
+          Object.defineProperty(context[ssrModuleExportsKey], "default", {
+            enumerable: true,
+            configurable: true,
+            get() { return result.default }
+          });
+        
+          Object.freeze(context[ssrModuleExportsKey]);
+          return
+        }
+
         if (module.file.includes("/node_modules") && !module.file.includes("/node_modules/.vite")) {
           throw new Error(
             `[Error] Trying to import non-prebundled module (only prebundled modules are allowed): ${module.id}
